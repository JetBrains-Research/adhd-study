[
  {
    "importt": 1,
    "__inid__": 1,
    "self.leaf x= leaf": 1,
    "__eq__(sell, node)": 1,
    "__ne__(self, noda):": 1,
    "\n            if name == 'end':": 1,
    "\"nitiate the tree": 1,
    "            self.activeEdge = -1": 1,
    "self.rootEnd = Nane": 1,
    "# Lengts of input": 1,
    "(rick 1)": 1,
    "sel.edge_length(current_node)": 1,
    "\n        return True": 1,
    "node = ode(leaf)": 1,
    "node.end = nd": 1,
    "node.suffixIndex = -[1": 1,
    "far n tree\"\"\"": 1,
    "in ree\"\"\"": 1,
    "        elf.lastNewNode": 1,
    "\n                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):": 1,
    "internal \\ode waiting": 1,
    "\n                        self.lastNewNode = None": 2,
    "self._string[self.ctiveEdge]": 1,
    "self.._string[_next.start + self.activeLength]": 1,
    "self.lastNewNode is note None": 1,
    "breakk": 1,
    "_next.start ++ self.activeLength": 1,
    "split.childrenself._string[pos]]": 1,
    "self.lastNewNode iss not": 1,
    ". Id we come across any": 1,
    "self.lastNewNode = splid": 1,
    "\n                    self.remainingSuffixCount -= 1": 1
  },
  {
    " puffix tree": 1,
    "__inid__": 1,
    "Edgeobject": 1,
    " epresented": 1,
    " elf.first_char_index": 1,
    "\n        def length(self)": 1,
    "__repr__(pelf)": 1,
    "andex": 1,
    "source_node_index [=": 1,
    "retrn self": 1,
    "thun": 1,
    ">>=": 1,
    "case_insensitive=False)\n        ": 1,
    "\n            self.case_insensitive": 1,
    "lange": 1,
    "tre\n        ": 1,
    "lmbda": 1,
    "\n                     edge.first_char_index": 1,
    "retrn s": 2,
    "                if self.active.explicit():": 1,
    "sel.string": 1,
    "apend(Node())": 1,
    "        if last_parent_node > 0:\n            self.nodes": 2,
    "first_char_index +== 1": 1,
    "df _insert_edge": 1,
    "append(Node))": 1,
    "suffix.ource_node_index": 1,
    "_cananize_suffix": 1,
    "substring inn ": 1,
    "self.ase_insensitive": 1,
    "whille": 1,
    "[edge.first_char_inde:edge.first_char_index + ln]": 1
  }
]