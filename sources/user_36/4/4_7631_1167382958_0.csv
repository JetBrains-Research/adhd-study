date,timestamp,fileName,fileHashCode,documentHashCode,fragment,userId,testMode,email,answers
2022-09-01 13:38:26.380000+02:00,0,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator importt attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __inid__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path  from root to leaf""""""
        self.leaf x= leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:39:09.635000+02:00,0,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator importt attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __inid__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path  from root to leaf""""""
        self.leaf x= leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:39:27.450000+02:00,625,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __inid__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path  from root to leaf""""""
        self.leaf x= leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:39:27.721000+02:00,1368,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __ini__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path  from root to leaf""""""
        self.leaf x= leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:39:39.017000+02:00,1388,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path  from root to leaf""""""
        self.leaf x= leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:39:43.840000+02:00,2304,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf x= leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:39:44.115000+02:00,2943,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leafx= leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:39:47.578000+02:00,2973,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x= leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:17.063000+02:00,3756,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, noda):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:17.158000+02:00,4526,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, nod):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:39.593000+02:00,4546,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:39.598000+02:00,5402,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
                if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:46.154000+02:00,5404,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
                if self.leaf:
                    return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:46.160000+02:00,6215,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                    return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:49.811000+02:00,6217,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end':
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:49.999000+02:00,7042,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' :
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:50.025000+02:00,7062,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' a:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:50.161000+02:00,7084,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' an:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:50.354000+02:00,7122,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:51.416000+02:00,7155,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and :
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:52.289000+02:00,7913,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and s:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:52.508000+02:00,8720,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and se:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:53.343000+02:00,8740,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and sel:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:53.425000+02:00,9439,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and self:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:54.027000+02:00,9459,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and self.:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:54.131000+02:00,10120,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and self.l:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:54.228000+02:00,10140,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and self.le:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:54.900000+02:00,10160,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and self.lea:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:56.054000+02:00,10616,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and self.leaf:
            if self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:40:59.046000+02:00,11267,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
            if name == 'end' and self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:41:00.752000+02:00,12014,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
                return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:41:25.676000+02:00,12763,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""nitiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:41:37.384000+02:00,13522,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represeted as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:41:49.417000+02:00,14264,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character
          index (not the character itself)""""""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:41:50.684000+02:00,15069,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character
          index (not the character itself)
          """"""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:41:50.688000+02:00,15836,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character
          index (not the character itself)
         """"""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:41:52.798000+02:00,15838,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character
          index (not the character itself)
        """"""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:01.988000+02:00,16535,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""
        activeEdge is represented as input string character
          index (not the character itself)
        """"""
            self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:05.255000+02:00,17257,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""
        activeEdge is represented as input string character
          index (not the character itself)
        """"""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:06.148000+02:00,18120,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""        activeEdge is represented as input string character
          index (not the character itself)
        """"""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:11.990000+02:00,18945,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character
          index (not the character itself)
        """"""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:12.506000+02:00,19703,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character          index (not the character itself)
        """"""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:13.022000+02:00,20470,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string characterindex (not the character itself)
        """"""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:15.990000+02:00,21291,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character index (not the character itself)
        """"""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:16.485000+02:00,22151,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character index (not the character itself)        """"""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:37.236000+02:00,22903,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character index (not the character itself)""""""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:37.414000+02:00,23682,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character index (not the character itself)""""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:37.558000+02:00,23720,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character index (not the character itself)""
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:41.236000+02:00,23740,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"""activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:41.413000+02:00,24589,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        """"activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:41.775000+02:00,24621,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        ""activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:42.265000+02:00,25366,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:42.648000+02:00,26088,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        #activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:44.469000+02:00,26827,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        # be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:44.633000+02:00,27491,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        #be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:44.829000+02:00,27511,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
        be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:44.835000+02:00,27537,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
       be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:45.321000+02:00,27539,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
    be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:45.324000+02:00,28303,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
   be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:45.576000+02:00,28305,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to
be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:42:46.230000+02:00,28415,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet tobe added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:43:09.908000+02:00,29145,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengts of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:43:27.760000+02:00,29854,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start + 1

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:43:27.980000+02:00,30385,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start 

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:43:35.456000+02:00,30414,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:44:05.110000+02:00,31006,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
        return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:44:22.031000+02:00,31703,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:44:24.503000+02:00,32479,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension""""""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:44:39.619000+02:00,33030,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = ode(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:45:02.475000+02:00,33588,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = sel.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:45:16.243000+02:00,34208,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = nd
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:45:25.934000+02:00,34758,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -[1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:45:30.656000+02:00,35400,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:45:32.552000+02:00,35881,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
           actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:45:34.472000+02:00,36388,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
           at the end of all phases""""""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:45:39.346000+02:00,36920,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases""""""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:45:58.764000+02:00,37472,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:02.304000+02:00,38034,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree""""""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:14.673000+02:00,38551,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:23.102000+02:00,39112,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in ree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:23.968000+02:00,39701,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree""""""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:30.683000+02:00,40294,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:35.809000+02:00,40781,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
         indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:36.468000+02:00,41367,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
         it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:40.125000+02:00,41905,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase""""""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:46:45.619000+02:00,42398,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        elf.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:47:11.422000+02:00,42944,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
            #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:47:11.426000+02:00,43533,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
                #  There is no outgoing edge starting with
            #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:47:22.295000+02:00,43535,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  # APCFALZ
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:47:23.102000+02:00,44128,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos  
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:48:14.077000+02:00,44686,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:48:14.081000+02:00,45200,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:48:57.270000+02:00,45202,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from  an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:03.781000+02:00,45755,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from an existng node (the current activeNode), and
                 if there is any internal \ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:04.231000+02:00,46169,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from an existng node (the current activeNode), and
                 if there is any internal ode waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:09.633000+02:00,46498,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""A new leaf edge is created in above line starting
                 from an existng node (the current activeNode), and
                 if there is any internal node waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:12.892000+02:00,46942,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                 from an existng node (the current activeNode), and
                 if there is any internal node waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:13.330000+02:00,47391,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                 if there is any internal node waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:13.801000+02:00,47411,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                 link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:14.215000+02:00,47704,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                 internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:14.699000+02:00,47724,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                 to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:15.134000+02:00,47793,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more noe waiting for suffix link
                 reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:16.776000+02:00,47849,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more noe waiting for suffix link
                reset.""""""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:37.235000+02:00,48267,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more noe waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:37.562000+02:00,48707,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more no waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:49:49.643000+02:00,48751,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:50:55.470000+02:00,49172,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existng node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:52:24.096000+02:00,49623,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.ctiveEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:52:32.342000+02:00,50021,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:52:33.852000+02:00,50458,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                  is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:52:35.062000+02:00,50889,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                 is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:52:38.509000+02:00,51412,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)""""""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:52:41.026000+02:00,51895,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self.._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:33.930000+02:00,52391,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:36.897000+02:00,52951,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase""""""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:38.776000+02:00,53358,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    breakk
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:42.922000+02:00,53765,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:44.863000+02:00,54152,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                  the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:45.079000+02:00,54550,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                 the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:57.047000+02:00,54570,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                  being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:57.269000+02:00,54947,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                 being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:57.681000+02:00,54967,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                  the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:57.871000+02:00,54987,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                 the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:58.303000+02:00,55007,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                  and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:58.504000+02:00,55027,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                 and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:58.916000+02:00,55047,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                  is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:53:59.124000+02:00,55067,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                 is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:54:01.527000+02:00,55087,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node get created""""""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:54:09.463000+02:00,55477,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in middle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node get created
                """"""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:54:25.903000+02:00,55863,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node get created
                """"""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:54:30.906000+02:00,56269,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start ++ self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:54:58.467000+02:00,56678,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.childrenself._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:12.737000+02:00,57060,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:14.951000+02:00,57572,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                  internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:15.163000+02:00,57910,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                 internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:15.614000+02:00,57930,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                  phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:15.814000+02:00,57950,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                 phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:16.312000+02:00,57970,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                  reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:16.495000+02:00,57990,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                 reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:18.248000+02:00,58010,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.""""""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:55:34.015000+02:00,58400,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode iss not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:02.048000+02:00,58798,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:03.757000+02:00,59178,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                  for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:03.952000+02:00,59534,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                 for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:04.403000+02:00,59554,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                  at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:04.581000+02:00,59576,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                 at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:05.003000+02:00,59596,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                  (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:05.197000+02:00,59616,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                 (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:05.508000+02:00,59636,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                  phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:05.726000+02:00,59656,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                 phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:06.007000+02:00,59676,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                  Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:06.199000+02:00,59696,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                 Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:06.544000+02:00,59716,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                  of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:06.733000+02:00,59736,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                 of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:07.079000+02:00,59756,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                  will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:07.313000+02:00,59776,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                 will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:10.189000+02:00,59796,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                will point to that internal node.""""""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:14.179000+02:00,60148,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                will point to that internal node.
                """"""
                self.lastNewNode = splid
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:14.358000+02:00,60509,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                will point to that internal node.
                """"""
                self.lastNewNode = spli
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:39.058000+02:00,60529,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                will point to that internal node.
                """"""
                self.lastNewNode = split
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                    self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:40.745000+02:00,60918,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                will point to that internal node.
                """"""
                self.lastNewNode = split
            """"""One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:41.655000+02:00,61252,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                will point to that internal node.
                """"""
                self.lastNewNode = split
            """"""
            One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:43.221000+02:00,61682,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                will point to that internal node.
                """"""
                self.lastNewNode = split
                """"""
            One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
2022-09-01 13:56:44.625000+02:00,62092,4.ipynb,7631,1167382958,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
""""""An optimized implementation of Suffix-Tree.""""""

# For more information about the comments you can read 
from operator import attrgetter

leafEnd = -1


class Node:
    """"""The Suffix-tree's node.""""""

    def __init__(self, leaf):
        # self.__identifier = identifier
        self.children = {}
        # for leaf nodes, it stores the index of suffix for
        # the path from root to leaf""""""
        self.leaf.x = leaf
        self.suffixIndex = None
        self.start = None
        self.end = None
        self.suffixLink = None

    def __eq__(sell, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) == atg(node)

    def __ne__(self, node):
        atg = attrgetter('start', 'end', 'suffixIndex')
        return atg(self) != atg(node)

    def __getattribute__(self, name):
        if name == 'end' and self.leaf:
            return leafEnd
        return super(Node, self).__getattribute__(name)


class SuffixTree:
    """"""The Suffix-Tree.""""""

    def __init__(self, data):
        """"""Initiate the tree.""""""
        self._string = data
        self.lastNewNode = None
        self.activeNode = None
        # activeEdge is represented as input string character index (not the character itself)
        self.activeEdge = -1
        self.activeLength = 0
        # remainingSuffixCount tells how many suffixes yet to be added in tree
        self.remainingSuffixCount = 0
        self.rootEnd = Nane
        self.splitEnd = None
        self.size = -1  # Lengths of input string
        self.root = None

    def edge_length(self, node):
        return node.end - node.start

    def walk_down(self, current_node):
        """"""
        Walk down from current node.
        activePoint change for walk down (APCFWD) using
        Skip/Count Trick  (rick 1). If activeLength is greater
        than current edge length, set next  internal node as
        activeNode and adjust activeEdge and activeLength
        accordingly to represent same activePoint.
        """"""
        length = self.edge_length(current_node)
        if (self.activeLength >= length):
            self.activeEdge += length
            self.activeLength -= length
            self.activeNode = current_node
            return True
        return False

    def new_node(self, start, end=None, leaf=False):
        """"""
        For root node, suffixLink will be set to NULL
        For internal nodes, suffixLink will be set to root
        by default in  current extension and may change in
        next extension
        """"""
        node = Node(leaf)
        node.suffixLink = self.root
        node.start = start
        node.end = end
        """"""
        suffixIndex will be set to -1 by default and
        actual suffix index will be set later for leaves
        at the end of all phases
        """"""
        node.suffixIndex = -1
        return node

    def extend_suffix_tree(self, pos):
        global leafEnd
        """"""
        Extension Rule 1, this takes care of extending all
        leaves created so far n tree
        """"""
        leafEnd = pos
        """"""
        Increment remainingSuffixCount indicating that a
        new suffix added to the list of suffixes yet to be
        added in tree
        """"""
        self.remainingSuffixCount += 1
        """"""
        set lastNewNode to None while starting a new phase,
        indicating there is no internal node waiting for
        it's suffix link reset in current phase
        """"""
        self.lastNewNode = None
        # Add all suffixes (yet to be added) one by one in tree
        while(self.remainingSuffixCount > 0):
            if (self.activeLength == 0):
                self.activeEdge = pos 
                #  There is no outgoing edge starting with
                #  activeEdge from activeNode
                if (self.activeNode.children.get(self._string[self.activeEdge]) is None):
                    # Extension Rule 2 (A new leaf edge gets created)
                    self.activeNode.children[self._string[self.activeEdge]] = self.new_node(pos, leaf=True)
                """"""
                A new leaf edge is created in above line starting
                from an existing node (the current activeNode), and
                if there is any internal node waiting for it's suffix
                link get reset, point the suffix link from that last
                internal node to current activeNode. Then set lastNewNode
                to None indicating no more not waiting for suffix link
                reset.
                """"""
                if (self.lastNewNode is not None):
                    self.lastNewNode.suffixLink = self.activeNode
                    self.lastNewNode = None
            #  There is an outgoing edge starting with activeEdge
            #  from activeNode
            else:
                #  Get the next node at the end of edge starting
                #  with activeEdge
                _next = self.activeNode.children.get(self._string[self.activeEdge])
                if self.walk_down(_next):  # Do walkdown
                    # Start from _next node (the new activeNode)
                    continue
                """"""
                Extension Rule 3 (current character being processed
                is already on the edge)
                """"""
                if (self._string[_next.start + self.activeLength] == self._string[pos]):
                    # If a newly created node waiting for it's
                    # suffix link to be set, then set suffix link
                    # of that waiting node to curent. active node
                    if((self.lastNewNode is note None) and (self.activeNode != self.root)):
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = None
                    # APCFER3
                    self.activeLength += 1
                    """"""
                    STOP all further processing in this phase
                    and move on to _next phase
                    """"""
                    break
                """"""
                We will be here when activePoint is in midle of
                the edge being traversed and current character
                being processed is not  on the edge (we fall off
                the tree). In this case, we add a new internal node
                and a new leaf edge going out of that new node. This
                is Extension Rule 2, where a new leaf edge and a new
                internal node gets created
                """"""
                self.splitEnd = _next.start + self.activeLength - 1
                # New internal node
                split = self.new_node(_next.start, self.splitEnd)
                self.activeNode.children[self._string[self.activeEdge]] = split
                # New leaf coming out of new internal node
                split.children[self._string[pos]] = self.new_node(pos, leaf=True)
                _next.start += self.activeLength
                split.children[self._string[_next.start]] = _next
                """"""
                We got a new internal node here. If there is any
                internal node created in last extensions of same
                phase which is still waiting for it's suffix link
                reset, do it now.
                """"""
                if (self.lastNewNode is not None):
                    # suffixLink of lastNewNode points to current newly
                    # created internal node
                    self.lastNewNode.suffixLink = split
                """"""
                Make the current newly created internal node waiting
                for it's suffix link reset (which is pointing to self.root
                at present). Id we come across any other internal node
                (existing or newly created) in next extension of same
                phase, when a new leaf edge gets added (i.e. when
                Extension Rule 2 applies is any of the next extension
                of same phase) at that point, suffixLink of this node
                will point to that internal node.
                """"""
                self.lastNewNode = split
                """"""
                One suffix got added in tree, decrement the count of
               suffixes yet to be added.""""""
                self.remainingSuffixCount -= 1
            if ((self.activeNode == self.root) and (self.activeLength > 0)):  # APCFER2C1
                self.activeLength -= 1
                self.activeEdge = pos - self.remainingSuffixCount + 1
            elif (self.activeNode != self.root):  # APCFER2C2
                self.activeNode = self.activeNode.suffixLink",60,OFF,-5175179124465167837,"[2, 2, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1]"
