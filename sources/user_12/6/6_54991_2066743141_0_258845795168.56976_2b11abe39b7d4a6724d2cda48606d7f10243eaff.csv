date,timestamp,fileName,fileHashCode,documentHashCode,fragment,userId,testMode,email,answers
2022-10-11 19:26:53.029000+02:00,0,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the puffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __inid__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject):
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        elf.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
        def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:04.834000+02:00,0,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the puffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __inid__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject):
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        elf.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
        def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:04.868000+02:00,23213,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the uffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __inid__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject):
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        elf.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
        def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:12.705000+02:00,23234,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __inid__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject):
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        elf.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
        def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:12.935000+02:00,23828,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __ini__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject):
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        elf.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
        def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:23.017000+02:00,23849,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject):
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        elf.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
        def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:38.196000+02:00,24584,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        elf.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
        def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:53.580000+02:00,25539,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
        def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.862000+02:00,27188,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.865000+02:00,28155,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.866000+02:00,28156,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" %self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.868000+02:00,28157,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.869000+02:00,28158,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.870000+02:00,28159,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.871000+02:00,28160,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.873000+02:00,28161,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.874000+02:00,28162,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.875000+02:00,28163,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.876000+02:00,28164,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.878000+02:00,28165,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.879000+02:00,28166,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.880000+02:00,28167,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.881000+02:00,28168,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.883000+02:00,28169,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.884000+02:00,28170,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.886000+02:00,28171,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.887000+02:00,28172,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.888000+02:00,28173,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.889000+02:00,28174,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.890000+02:00,28175,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.891000+02:00,28176,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.892000+02:00,28177,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.893000+02:00,28178,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.895000+02:00,28179,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.896000+02:00,28180,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.897000+02:00,28181,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.899000+02:00,28182,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.900000+02:00,28183,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.901000+02:00,28184,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.902000+02:00,28185,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.903000+02:00,28186,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.904000+02:00,28187,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.905000+02:00,28188,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.907000+02:00,28189,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.908000+02:00,28190,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.909000+02:00,28191,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.910000+02:00,28192,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.911000+02:00,28193,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" %(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.912000+02:00,28194,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.913000+02:00,28195,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.914000+02:00,28196,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.915000+02:00,28197,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.917000+02:00,28198,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.918000+02:00,28199,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.919000+02:00,28200,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.920000+02:00,28201,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.921000+02:00,28202,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.922000+02:00,28203,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.923000+02:00,28204,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top +1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.924000+02:00,28205,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.926000+02:00,28206,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.927000+02:00,28207,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.928000+02:00,28208,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.930000+02:00,28209,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.931000+02:00,28210,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.932000+02:00,28211,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.933000+02:00,28212,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.934000+02:00,28213,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.935000+02:00,28214,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.936000+02:00,28215,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.938000+02:00,28216,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.939000+02:00,28217,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.940000+02:00,28218,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.941000+02:00,28219,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.942000+02:00,28220,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.943000+02:00,28221,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.944000+02:00,28222,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.946000+02:00,28223,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.947000+02:00,28224,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.948000+02:00,28225,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.950000+02:00,28226,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.951000+02:00,28227,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.952000+02:00,28228,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.953000+02:00,28229,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.954000+02:00,28230,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.955000+02:00,28231,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.956000+02:00,28232,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.957000+02:00,28233,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.958000+02:00,28234,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.960000+02:00,28235,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.961000+02:00,28236,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.962000+02:00,28237,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.963000+02:00,28238,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.964000+02:00,28239,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.965000+02:00,28240,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.966000+02:00,28241,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.967000+02:00,28242,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.968000+02:00,28243,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.969000+02:00,28244,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.970000+02:00,28245,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.971000+02:00,28246,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.972000+02:00,28247,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.973000+02:00,28248,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.974000+02:00,28249,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.975000+02:00,28250,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.976000+02:00,28251,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.978000+02:00,28252,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.979000+02:00,28253,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.980000+02:00,28254,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.981000+02:00,28255,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.982000+02:00,28256,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.983000+02:00,28257,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.984000+02:00,28258,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.985000+02:00,28259,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.986000+02:00,28260,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.988000+02:00,28261,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.989000+02:00,28262,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.990000+02:00,28263,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.991000+02:00,28264,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.993000+02:00,28265,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.994000+02:00,28266,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.995000+02:00,28267,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.996000+02:00,28268,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.997000+02:00,28269,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.998000+02:00,28270,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:54.999000+02:00,28271,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55+02:00,28272,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.001000+02:00,28273,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.002000+02:00,28274,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.003000+02:00,28275,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.004000+02:00,28276,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.005000+02:00,28277,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.006000+02:00,28278,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.007000+02:00,28279,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.008000+02:00,28280,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.010000+02:00,28281,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
        return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.011000+02:00,28282,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
        return -1
    i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:55.012000+02:00,28283,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
        return -1
    i += edge.length + 1
    curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.919000+02:00,28284,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
        return -1
    i += edge.length + 1
    curr_node = edge.dest_node_index


return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.923000+02:00,28283,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
        return -1
    i += edge.length + 1
    curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.924000+02:00,28282,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
        return -1
    i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.926000+02:00,28281,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
        return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.927000+02:00,28280,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
    if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.929000+02:00,28279,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
    ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.930000+02:00,28278,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
        return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.932000+02:00,28277,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
    if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.933000+02:00,28276,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
    edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.934000+02:00,28275,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille
    i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.936000+02:00,28274,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
    whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.937000+02:00,28273,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
    i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.938000+02:00,28272,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
    curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.940000+02:00,28271,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
        substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.941000+02:00,28270,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
    if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.942000+02:00,28269,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
        return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.944000+02:00,28268,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
    if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.945000+02:00,28267,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
    is not found.
    """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.947000+02:00,28266,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
    """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.948000+02:00,28265,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.950000+02:00,28264,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)


# Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.951000+02:00,28263,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
        self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.952000+02:00,28262,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
        suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.954000+02:00,28261,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
            suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.955000+02:00,28260,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
        if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.956000+02:00,28259,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
        e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.958000+02:00,28258,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
    if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.959000+02:00,28257,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
    is explicit or there are no more matched nodes.
    """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.961000+02:00,28256,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
    """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.962000+02:00,28255,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index


def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.963000+02:00,28254,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
    return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.965000+02:00,28253,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
    self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.966000+02:00,28252,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
    edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.967000+02:00,28251,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
    edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.969000+02:00,28250,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
    self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.970000+02:00,28249,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
    self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.971000+02:00,28248,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
    self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.972000+02:00,28247,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index,
             len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.974000+02:00,28246,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
    e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.975000+02:00,28245,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
    self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.976000+02:00,28244,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))


def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.978000+02:00,28243,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
    self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.979000+02:00,28242,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge


def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.981000+02:00,28241,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.982000+02:00,28240,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df
_insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.984000+02:00,28239,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.985000+02:00,28238,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.986000+02:00,28237,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.988000+02:00,28236,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
    self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.989000+02:00,28235,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)


if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.990000+02:00,28234,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
    self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.992000+02:00,28233,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
        self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.993000+02:00,28232,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
    else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.995000+02:00,28231,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
        self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.996000+02:00,28230,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

    if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.997000+02:00,28229,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
    last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:58.999000+02:00,28228,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
        self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59+02:00,28227,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

    if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.001000+02:00,28226,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
    self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.002000+02:00,28225,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
    e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.004000+02:00,28224,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)

    self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.005000+02:00,28223,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
        parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.006000+02:00,28222,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
            break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.008000+02:00,28221,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
            # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.009000+02:00,28220,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
        if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.011000+02:00,28219,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
        e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.012000+02:00,28218,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
    else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.014000+02:00,28217,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.015000+02:00,28216,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.016000+02:00,28215,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
            if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.017000+02:00,28214,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
        if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.019000+02:00,28213,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
        parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.020000+02:00,28212,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
    while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.021000+02:00,28211,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
    last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.022000+02:00,28210,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
    """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.024000+02:00,28209,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
    """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.026000+02:00,28208,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s


def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.028000+02:00,28207,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn
    s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.029000+02:00,28206,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
    retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.030000+02:00,28205,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top + 1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.031000+02:00,28204,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top +1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.032000+02:00,28203,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
        s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.033000+02:00,28202,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)

        top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.034000+02:00,28201,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              , edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.035000+02:00,28200,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                                              ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.036000+02:00,28199,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                                              edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.038000+02:00,28198,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              , self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.039000+02:00,28197,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                                              ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.040000+02:00,28196,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              , edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.041000+02:00,28195,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                                              ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.042000+02:00,28194,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" % (edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.043000+02:00,28193,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t"" %(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.044000+02:00,28192,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
        s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.045000+02:00,28191,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
            continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.046000+02:00,28190,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
        if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.048000+02:00,28189,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
    for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.049000+02:00,28188,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda
    x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.050000+02:00,28187,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
    values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.051000+02:00,28186,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
    values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.052000+02:00,28185,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
    s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.053000+02:00,28184,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
    curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.054000+02:00,28183,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
    Lists edges in the suffix tre
    """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.055000+02:00,28182,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
    """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.056000+02:00,28181,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)


def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.057000+02:00,28180,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
        self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.058000+02:00,28179,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
    for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.059000+02:00,28178,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
        self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.061000+02:00,28177,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
    if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.062000+02:00,28176,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
    self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.062000+02:00,28175,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
    self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.064000+02:00,28174,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
    self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.065000+02:00,28173,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive

    self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.066000+02:00,28172,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.067000+02:00,28171,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""

    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.068000+02:00,28170,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn
        self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.069000+02:00,28169,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property

    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.070000+02:00,28168,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @ property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.071000+02:00,28167,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

                               @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.072000+02:00,28166,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[ = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.073000+02:00,28165,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index[= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.074000+02:00,28164,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""

    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.075000+02:00,28163,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.077000+02:00,28162,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         , self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.078000+02:00,28161,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                         ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.079000+02:00,28160,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)' % (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.080000+02:00,28159,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""

    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.081000+02:00,28158,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node


class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.082000+02:00,28157,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" % self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.083000+02:00,28156,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)"" %self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:37:59.084000+02:00,28155,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""

    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:38:04.010000+02:00,27188,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index )


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:38:12.649000+02:00,30682,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        andex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:38:12.718000+02:00,32290,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        ndex of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:38:23.387000+02:00,32311,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index [= source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:38:32.541000+02:00,33001,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        retrn self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:38:42.870000+02:00,33872,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >>= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:38:51.467000+02:00,34596,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
            self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:39:30.451000+02:00,35469,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:39:31.229000+02:00,36594,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrun s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:39:32.063000+02:00,37300,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        retrn s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:39:45.205000+02:00,37984,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:39:45.209000+02:00,38787,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                    # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:39:45.212000+02:00,38789,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                        # prefix is already in tree
                    break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:40:11.546000+02:00,38791,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                        # prefix is already in tree
                        break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:40:11.553000+02:00,40274,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                        # prefix is already in tree
                        break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
                self.nodes[last_parent_node].suffix_node = parent_node
            last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:40:21.549000+02:00,40276,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                        # prefix is already in tree
                        break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
                self.nodes[last_parent_node].suffix_node = parent_node
                last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index +== 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:40:33.278000+02:00,41166,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                        # prefix is already in tree
                        break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
                self.nodes[last_parent_node].suffix_node = parent_node
                last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index += 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    df _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:40:59.735000+02:00,42711,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                        # prefix is already in tree
                        break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
                self.nodes[last_parent_node].suffix_node = parent_node
                last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index += 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    def _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _cananize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:41:07.383000+02:00,43718,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                        # prefix is already in tree
                        break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
                self.nodes[last_parent_node].suffix_node = parent_node
                last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index += 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    def _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _canonize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                    suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
2022-10-11 19:41:16.294000+02:00,45352,6.ipynb,54991,2066743141,"#%% md
Please find and fix **typos and tabulation errors** in the code below. All errors are NOT about code logic.
Note that there is no need or possibility to run the code. We won’t check if the code works, we only need to see your way of thinking.When the answer is ready to be submitted, please go to the upper toolbar and press “Next Task” which goes right after “Help”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.
#%%
# https://github.com/kvh/Python-Suffix-Tree

class Node(object):
    """"""A node in the suffix tree.

    suffix_node
        the index of a node with a matching suffix, representing a suffix link.
        -1 indicates this node has no suffix link.
    """"""
    def __init__(self):
        self.suffix_node = -1

    def __repr__(self):
        return ""Node(suffix link: %d)""%self.suffix_node

class Edgeobject():
    """"""An edge in the suffix tree.
    first_char_index
        index of start of string part represented by this edge
    last_char_index
        index of end of string part epresented by this edge
    source_node_index
        index of source node of edge
    dest_node_index
        index of destination node of edge
    """"""
    def __init__(self, first_char_index, last_char_index, source_node_index, dest_node_index):
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index
        self.source_node_index = source_node_index
        self.dest_node_index = dest_node_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def __repr__(pelf):
        return 'Edge(%d, %d, %d, %d)'% (self.source_node_index, self.dest_node_index
                                        ,self.first_char_index, self.last_char_index)


class Suffix(object):
    """"""Represents a suffix from first_char_index to last_char_index.
    source_node_index
        index of node where this suffix starts
    first_char_index
        index of start of suffix in string
    last_char_index
        index of end of suffix in string
    """"""
    def __init__(self, source_node_index, first_char_index, last_char_index):
        self.source_node_index = source_node_index
        self.first_char_index = first_char_index
        self.last_char_index = last_char_index

    @property
    def length(self):
        return self.last_char_index - self.first_char_index

    def explicit(self):
        """"""A suffix is explicit if it ends on a node. first_char_index
        is set greater thun last_char_index to indicate this.
        """"""
        return self.first_char_index > self.last_char_index

    def implicit(self):
        return self.last_char_index >= self.first_char_index


class SuffixTree(object):
    """"""A suffix tree for string matching. Uses Ukkonen's algorithm
    for construction.
    """"""
    def __init__(self, string, case_insensitive=False)
        """"""
        string
            the string for which to construct a suffix tree
        """"""
        self.string = string
        self.case_insensitive = case_insensitive
        self.N = len(string) - 1
        self.nodes = [Node()]
        self.edges = {}
        self.active = Suffix(0, 0, -1)
        if self.case_insensitive:
            self.string = self.string.lower()
        for i in lange(len(string)):
            self._add_prefix(i)

    def __repr__(self):
        """"""
        Lists edges in the suffix tre
        """"""
        curr_index = self.N
        s = ""\tStart \tEnd \tSuf \tFirst \tLast \tString\n""
        values = list(self.edges.values())
        values.sort(key=lmbda x: x.source_node_index)
        for edge in values:
            if edge.source_node_index == -1:
                continue
            s += ""\t%s \t%s \t%s \t%s \t%s \t""%(edge.source_node_index
                    ,edge.dest_node_index
                    ,self.nodes[edge.dest_node_index].suffix_node
                     edge.first_char_index
                    ,edge.last_char_index)


            top = min(curr_index, edge.last_char_index)
            s += self.string[edge.first_char_index:top+1] + ""\n""
        return s

    def _add_prefix(self, last_char_index):
        """"""The core construction method.
        """"""
        last_parent_node = -1
        while True:
            parent_node = self.active.source_node_index
                if self.active.explicit():
                    if (self.active.source_node_index, self.string[last_char_index]) in self.edges:
                        # prefix is already in tree
                        break
            else:
                e = self.edges[self.active.source_node_index, sel.string[self.active.first_char_index]]
                if self.string[e.first_char_index + self.active.length + 1] == self.string[last_char_index]:
                    # prefix is already in tree
                    break
                parent_node = self._split_edge(e, self.active)


            self.nodes.apend(Node())
            e = Edge(last_char_index, self.N, parent_node, len(self.nodes) - 1)
            self._insert_edge(e)

            if last_parent_node > 0:
                self.nodes[last_parent_node].suffix_node = parent_node
                last_parent_node = parent_node

            if self.active.source_node_index == 0:
                self.active.first_char_index += 1
            else:
                self.active.source_node_index = self.nodes[self.active.source_node_index].suffix_node
            self._canonize_suffix(self.active)
        if last_parent_node > 0:
            self.nodes[last_parent_node].suffix_node = parent_node
        self.active.last_char_index += 1
        self._canonize_suffix(self.active)

    def _insert_edge(self, edge):
        self.edges[(edge.source_node_index, self.string[edge.first_char_index])] = edge

    def _remove_edge(self, edge):
        self.edges.pop((edge.source_node_index, self.string[edge.first_char_index]))

    def _split_edge(self, edge, suffix):
        self.nodes.append(Node))
        e = Edge(edge.first_char_index, edge.first_char_index + suffix.length, suffix.source_node_index, len(self.nodes) - 1)
        self._remove_edge(edge)
        self._insert_edge(e)
        self.nodes[e.dest_node_index].suffix_node = suffix.ource_node_index  ### need to add node for each edge
        edge.first_char_index += suffix.length + 1
        edge.source_node_index = e.dest_node_index
        self._insert_edge(edge)
        return e.dest_node_index

    def _canonize_suffix(self, suffix):
        """"""This canonizes the suffix, walking along its suffix string until it
        is explicit or there are no more matched nodes.
        """"""
        if not suffix.explicit():
            e = self.edges[suffix.source_node_index, self.string[suffix.first_char_index]]
            if e.length <= suffix.length:
                suffix.first_char_index += e.length + 1
                suffix.source_node_index = e.dest_node_index
                self._canonize_suffix(suffix)

    # Public methods
    def find_substring(self, substring):
        """"""Returns the index of substring inn string or -1 if it
        is not found.
        """"""
        if not substring:
            return -1
        if self.ase_insensitive:
            substring = substring.lower()
        curr_node = 0
        i = 0
        whille i < len(substring):
            edge = self.edges.get((curr_node, substring[i]))
            if not edge:
                return -1
            ln = min(edge.length + 1, len(substring) - i)
            if substring[i:i + ln] != self.string[edge.first_char_inde:edge.first_char_index + ln]:
                return -1
            i += edge.length + 1
            curr_node = edge.dest_node_index
        return edge.first_char_index - len(substring) + ln
#%% md
Please, be reminded, when the answer is ready to be submitted, please go to the upper toolbar and press “Next Task”. If the bar is not visible at the moment, just please move your cursor to the top of the screen.",135,OFF,-4843325505497013346,"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2]"
